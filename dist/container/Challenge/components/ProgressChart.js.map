{"version":3,"sources":["../../../../src/container/Challenge/components/ProgressChart.tsx"],"names":["getColor","value","colorPlate","fillColor","APP_FONT_COLOR","fontColor","ProgressChart","props","plate","Math","round","radius","min","height","width","textPixels","textSize","valueStyle","fontSize","percentStyle","percent","fill","fontFamily","defaultProps","riseAnimation","waveAnimation","waveFrequency","waveAmplitude"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAcA,SAASA,QAAT,CAAkBC,KAAlB,EAAiC;AAC/B,MAAIC,UAAU,GAAG;AACfC,IAAAA,SAAS,EAAEC,0BADI;AAEfC,IAAAA,SAAS,EAAED;AAFI,GAAjB;AAIA,SAAOF,UAAP;AACD;;AAED,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAASC,KAAT,EAA2B;AAC/C,MAAMC,KAAK,GAAGR,QAAQ,CAACO,KAAK,CAACN,KAAP,CAAtB;AACA,SACE,6BAAC,yBAAD,eACMM,KADN;AAEE,IAAA,YAAY,EAAE,sBAACA,KAAD,EAAgB;AAC5B,UAAMN,KAAK,GAAGQ,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACN,KAAjB,CAAd;AACA,UAAMU,MAAM,GAAGF,IAAI,CAACG,GAAL,CAASL,KAAK,CAACM,MAAN,GAAe,CAAxB,EAA2BN,KAAK,CAACO,KAAN,GAAc,CAAzC,CAAf;AACA,UAAMC,UAAU,GAAIR,KAAK,CAACS,QAAN,GAAiBL,MAAlB,GAA4B,CAA/C;AACA,UAAMM,UAAU,GAAG;AACjBC,QAAAA,QAAQ,EAAEH;AADO,OAAnB;AAGA,UAAMI,YAAY,GAAG;AACnBD,QAAAA,QAAQ,EAAEH,UAAU,GAAG;AADJ,OAArB;AAIA,aACE,4CACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,KAAK,EAAEE;AAAhC,SACGhB,KADH,CADF,EAIE;AAAO,QAAA,KAAK,EAAEkB;AAAd,SAA6BZ,KAAK,CAACa,OAAnC,CAJF,CADF;AAQD,KArBH;AAsBE,IAAA,QAAQ,MAtBV;AAuBE,IAAA,WAAW,EAAE;AACXC,MAAAA,IAAI,EAAEb,KAAK,CAACL;AADD,KAvBf;AA0BE,IAAA,SAAS,EAAE;AACTkB,MAAAA,IAAI,EAAEb,KAAK,CAACL;AADH,KA1Bb;AA6BE,IAAA,SAAS,EAAE;AACTkB,MAAAA,IAAI,EAAEb,KAAK,CAACH,SADH;AAETiB,MAAAA,UAAU,EAAE;AAFH,KA7Bb;AAiCE,IAAA,aAAa,EAAE;AACbD,MAAAA,IAAI,EAAEb,KAAK,CAACH,SADC;AAEbiB,MAAAA,UAAU,EAAE;AAFC;AAjCjB,KADF;AAwCD,CA1CD;;AA4CAhB,aAAa,CAACiB,YAAd,GAA6B;AAC3BH,EAAAA,OAAO,EAAE,GADkB;AAE3BI,EAAAA,aAAa,EAAE,IAFY;AAG3BC,EAAAA,aAAa,EAAE,IAHY;AAI3BC,EAAAA,aAAa,EAAE,CAJY;AAK3BC,EAAAA,aAAa,EAAE,CALY;AAM3BxB,EAAAA,SAAS,EAAE;AANgB,CAA7B;eAQeG,a","sourcesContent":["import React from 'react'\nimport LiquidFillGauge from 'react-liquid-gauge'\nimport { APP_FONT_COLOR } from '@Src/contants/themeColor'\ninterface ChartProp {\n  width: number\n  height: number\n  value: number\n  style?: object\n  percent?: string\n  riseAnimation?: boolean\n  waveAnimation?: boolean\n  waveFrequency?: number\n  waveAmplitude?: number\n  fillColor?: string\n}\n\nfunction getColor(value: number) {\n  let colorPlate = {\n    fillColor: APP_FONT_COLOR,\n    fontColor: APP_FONT_COLOR\n  }\n  return colorPlate\n}\n\nconst ProgressChart = function(props: ChartProp) {\n  const plate = getColor(props.value)\n  return (\n    <LiquidFillGauge\n      {...props}\n      textRenderer={(props: any) => {\n        const value = Math.round(props.value)\n        const radius = Math.min(props.height / 2, props.width / 2)\n        const textPixels = (props.textSize * radius) / 2\n        const valueStyle = {\n          fontSize: textPixels\n        }\n        const percentStyle = {\n          fontSize: textPixels * 0.6\n        }\n\n        return (\n          <tspan>\n            <tspan className='value' style={valueStyle}>\n              {value}\n            </tspan>\n            <tspan style={percentStyle}>{props.percent}</tspan>\n          </tspan>\n        )\n      }}\n      gradient\n      circleStyle={{\n        fill: plate.fillColor\n      }}\n      waveStyle={{\n        fill: plate.fillColor\n      }}\n      textStyle={{\n        fill: plate.fontColor,\n        fontFamily: 'Arial'\n      }}\n      waveTextStyle={{\n        fill: plate.fontColor,\n        fontFamily: 'Arial'\n      }}\n    />\n  )\n}\n\nProgressChart.defaultProps = {\n  percent: '%',\n  riseAnimation: true,\n  waveAnimation: true,\n  waveFrequency: 1,\n  waveAmplitude: 3,\n  fillColor: '#000000'\n}\nexport default ProgressChart\n"],"file":"ProgressChart.js"}