{"version":3,"sources":["../../../../src/container/Challenge/components/Notifier.tsx"],"names":["StyledTxt","color","Notifier","open","messageInfo","key","Math","random","message","queue","length","setState","shift","processQueue","setInterval","push","state","vertical","horizontal","handleClose","handleExited","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,SAAS,GAAG,+BAAO,MAAP,EAAe;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAAf,CAAlB;;IAIMC,Q;;;;;;;;;;;;;;;;;;oFACgC,E;;oFAErB;AACbC,MAAAA,IAAI,EAAE,KADO;AAEbC,MAAAA,WAAW,EAAE;AACXC,QAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EADM;AAEXC,QAAAA,OAAO,EAAE;AAFE;AAFA,K;;2FAQQ,YAAM;AAC3B,UAAI,MAAKC,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,cAAKC,QAAL,CAAc;AACZP,UAAAA,WAAW,EAAE,MAAKK,KAAL,CAAWG,KAAX,EADD;AAEZT,UAAAA,IAAI,EAAE;AAFM,SAAd;AAID;AACF,K;;0FAEqB,YAAM;AAC1B,YAAKQ,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,K;;2FAEsB,YAAM;AAC3B,YAAKU,YAAL;AACD,K;;;;;;;wCAE0B;AAAA;;AACzBC,MAAAA,WAAW,CAAC,YAAM;AAChB,QAAA,MAAI,CAACL,KAAL,CAAWM,IAAX,CAAgB;AACdV,UAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EADS;AAEdC,UAAAA,OAAO,EACL,2CACGF,IAAI,CAACC,MAAL,EADH,qBACiC,6BAAC,SAAD,eADjC,EAC8D,GAD9D;AAHY,SAAhB;;AASA,QAAA,MAAI,CAACM,YAAL;AACD,OAXU,EAWR,IAXQ,CAAX;AAYD;;;6BAEe;AAAA,UACNT,WADM,GACU,KAAKY,KADf,CACNZ,WADM;AAGd,aACE,6BAAC,iBAAD;AACE,QAAA,GAAG,EAAEA,WAAW,CAACC,GADnB;AAEE,QAAA,YAAY,EAAE;AACZY,UAAAA,QAAQ,EAAE,QADE;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAFhB;AAME,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWb,IANnB;AAOE,QAAA,gBAAgB,EAAE,IAPpB;AAQE,QAAA,OAAO,EAAE,KAAKgB,WARhB;AASE,QAAA,QAAQ,EAAE,KAAKC,YATjB;AAUE,QAAA,YAAY,EAAE;AACZ,8BAAoB;AADR,SAVhB;AAaE,QAAA,OAAO,EAAEhB,WAAW,CAACI,OAbvB;AAcE,QAAA,MAAM,EAAE,CACN,6BAAC,mBAAD;AACE,UAAA,GAAG,EAAC,OADN;AAEE,wBAAW,OAFb;AAGE,UAAA,KAAK,EAAC,SAHR;AAIE,UAAA,OAAO,EAAE,KAAKW;AAJhB,WAME,6BAAC,cAAD,OANF,CADM;AAdV,QADF;AA2BD;;;;EAzEoBE,eAAMC,S;;eA4EdpB,Q","sourcesContent":["import React, { ReactNode } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport styled from 'styled-components'\n\ninterface MessageProp {\n  key: number\n  message: ReactNode\n}\n\ninterface NotifierState {\n  open: boolean\n  messageInfo: MessageProp | {}\n}\n\nconst StyledTxt = styled('span')({\n  color: '#e10050'\n})\n\nclass Notifier extends React.Component<{}, NotifierState> {\n  private queue: Array<MessageProp> = []\n\n  public state = {\n    open: false,\n    messageInfo: {\n      key: Math.random(),\n      message: ''\n    }\n  }\n\n  private processQueue = () => {\n    if (this.queue.length > 0) {\n      this.setState({\n        messageInfo: this.queue.shift() as MessageProp,\n        open: true\n      })\n    }\n  }\n\n  private handleClose = () => {\n    this.setState({ open: false })\n  }\n\n  private handleExited = () => {\n    this.processQueue()\n  }\n\n  public componentDidMount() {\n    setInterval(() => {\n      this.queue.push({\n        key: Math.random(),\n        message: (\n          <span>\n            {Math.random()} has created a {<StyledTxt>walk</StyledTxt>}{' '}\n            challenge\n          </span>\n        )\n      })\n      this.processQueue()\n    }, 3000)\n  }\n\n  public render() {\n    const { messageInfo } = this.state\n\n    return (\n      <Snackbar\n        key={messageInfo.key}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n        open={this.state.open}\n        autoHideDuration={2000}\n        onClose={this.handleClose}\n        onExited={this.handleExited}\n        ContentProps={{\n          'aria-describedby': 'message-id'\n        }}\n        message={messageInfo.message}\n        action={[\n          <IconButton\n            key='close'\n            aria-label='Close'\n            color='inherit'\n            onClick={this.handleClose}\n          >\n            <CloseIcon />\n          </IconButton>\n        ]}\n      />\n    )\n  }\n}\n\nexport default Notifier\n"],"file":"Notifier.js"}