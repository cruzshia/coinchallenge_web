{"version":3,"sources":["../../../src/container/Challenge/Challenge.tsx"],"names":["ChallengeContainer","display","justifyContent","marginTop","breakPoint","StyledGridList","width","zIndex","StyledInfoCtr","props","bgcolor","APP_THEME_BACKGROUND","Grid","paddingBottom","mapStateToProps","state","challengeState","get","commonState","contract","toJS","mapDispathToProps","dispatch","fetchChallenge","data","groupId","challenger","address","Challenge","params","match","fetched","checkAndFetch","completeDays","totalDays","targetDays","startDayTimestamp","percent","Math","floor","React","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport styled from 'styled-components'\nimport { Helmet } from 'react-helmet'\nimport ChallengeCard from './components/ChallengeCard'\nimport ChallengeInfo from './components/ChallengeInfo'\nimport CrowdInfo from './components/CrowdInfo'\nimport Sponsers from './components/Sponsers'\nimport { ChallengeStateType } from '@Reducers/challengeReducer'\nimport { CommonStateType } from '@Reducers/commonReducer'\nimport { APP_THEME_BACKGROUND } from '@Src/contants/themeColor'\nimport HistoryTimeline from './components/HistoryTimeline'\n// import Notifier from './components/Notifier'\nimport { breakPoint } from '@Src/contants/common'\n\n// import { FormattedMessage } from 'react-intl'\n// import CountUp from 'react-countup'\nimport Web3 from 'web3'\nimport { getChallenge } from '@Epics/challengeEpic/action'\nimport { ChallengeType } from '@Src/typing/globalTypes'\n\nconst ChallengeContainer = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  marginTop: '30px',\n  [`@media (max-width: ${breakPoint})`]: {\n    marginTop: 0\n  }\n})\n\nconst StyledGridList = styled('div')({\n  width: 800,\n  zIndex: 1,\n  [`@media (max-width: ${breakPoint})`]: {\n    width: '100%'\n  }\n})\n\ninterface InfoCtrProp {\n  bgcolor?: string\n}\nconst StyledInfoCtr = styled('div')<InfoCtrProp>`\n  display: flex;\n  background: ${(props: InfoCtrProp) =>\n    props.bgcolor ? props.bgcolor : APP_THEME_BACKGROUND};\n  justify-content: center;\n  align-items: center;\n  @media (max-width: ${breakPoint}) {\n    flex-direction: column;\n  }\n`\n\nconst Grid = styled('div')({\n  width: '50%',\n  paddingBottom: '10px',\n  [`@media (max-width: ${breakPoint})`]: {\n    width: '100%'\n  }\n})\n\ninterface ChallengeProp extends RouteComponentProps, ChallengeType {\n  contract: Web3 | null\n  error: boolean\n  fetchChallenge: (data: RouteParams) => void\n}\nexport interface RouteParams {\n  address: string\n  groupId: string\n}\n\nconst mapStateToProps = (state: Map<string, object>) => {\n  const challengeState = state.get('challenge') as ChallengeStateType\n  const commonState = state.get('common') as CommonStateType\n  return {\n    contract: commonState.get('contract'),\n    ...challengeState.toJS()\n  }\n}\n\nconst mapDispathToProps = (dispatch: Dispatch) => ({\n  fetchChallenge: (data: RouteParams) =>\n    dispatch(\n      getChallenge({\n        groupId: data.groupId,\n        challenger: data.address\n      })\n    )\n})\n\nclass Challenge extends React.Component<ChallengeProp> {\n  public address: string = ''\n  public groupId: string = ''\n  public fetched: boolean = false\n\n  constructor(props: ChallengeProp) {\n    super(props)\n    const params = this.props.match.params as RouteParams\n    this.address = params.address\n    this.groupId = params.groupId\n  }\n\n  private checkAndFetch() {\n    if (this.props.contract && !this.fetched) {\n      this.props.fetchChallenge({\n        address: this.address,\n        groupId: this.groupId\n      })\n      this.fetched = true\n    }\n  }\n\n  public componentDidUpdate() {\n    this.checkAndFetch()\n  }\n\n  public componentDidMount() {\n    this.checkAndFetch()\n  }\n\n  public render() {\n    const {\n      completeDays,\n      totalDays,\n      targetDays,\n      startDayTimestamp\n    } = this.props\n\n    let percent = Math.floor((completeDays * 100) / targetDays)\n    percent = percent > 100 ? 100 : percent\n\n    return (\n      <React.Fragment>\n        <ChallengeContainer>\n          <Helmet>\n            <title>{this.address}'s coin challenge</title>\n            <link rel='canonical' href='http://mysite.com/example' />\n          </Helmet>\n\n          <StyledGridList>\n            <ChallengeCard\n              address={this.address}\n              groupId={this.groupId}\n              startDayTimestamp={startDayTimestamp}\n            />\n            <StyledInfoCtr>\n              <Grid>\n                <ChallengeInfo\n                  completeDays={completeDays}\n                  totalDays={totalDays}\n                  targetDays={targetDays}\n                  percent={percent}\n                />\n              </Grid>\n              <Grid>\n                <CrowdInfo />\n              </Grid>\n            </StyledInfoCtr>\n            <Sponsers />\n            <HistoryTimeline />\n          </StyledGridList>\n          {/* <CountUp end={1000} /> */}\n        </ChallengeContainer>\n        {/* <Notifier /> */}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispathToProps\n)(Challenge)\n"],"file":"Challenge.js"}