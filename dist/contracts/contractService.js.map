{"version":3,"sources":["../../src/contracts/contractService.ts"],"names":["STATUS","Succeeded","Failed","Aborted","getChallenge","contract","groupId","challenger","methods","call","response","message","error","getAllChallenges","events","NewChallenge","filter","proposer","fromBlock","_error","event","console","log","getFinishChallenges","FinishChallenge","who","status","getNewChallengeGroup","NewChallengeGroup"],"mappings":"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","sourcesContent":["import Contract from 'web3/eth/contract'\n//process.env.REACT_APP_CONTRACT_ADDRESS\nconst STATUS = {\n  Succeeded: 0,\n  Failed: 1,\n  Aborted: 2\n}\n\ninterface GetChallengeEvevntProp {\n  contract: Contract\n  challenger: string\n}\n\ninterface GetChallengeProp {\n  contract: Contract\n  groupId: string\n  challenger: string\n}\n\nexport const getChallenge = async ({\n  contract,\n  groupId,\n  challenger\n}: GetChallengeProp) => {\n  let response: object\n  try {\n    response = await contract.methods.getChallenge(groupId, challenger).call()\n  } catch (err) {\n    response = {\n      message: err,\n      error: true\n    }\n  }\n  return response\n}\n\nexport const getAllChallenges = async ({\n  contract,\n  challenger\n}: GetChallengeEvevntProp) => {\n  await contract.events.NewChallenge(\n    {\n      filter: { proposer: challenger },\n      fromBlock: 0\n      // toBlock: 'latest'\n    },\n    function(_error: any, event: any) {\n      console.log('event,', event)\n    }\n  )\n}\n\nexport const getFinishChallenges = async ({\n  contract,\n  challenger\n}: GetChallengeProp) => {\n  await contract.events.FinishChallenge(\n    {\n      filter: { who: challenger, status: STATUS.Succeeded },\n      fromBlock: 0\n      // to: 'latest'\n    },\n    function(_error: any, event: any) {\n      console.log('event,', event)\n    }\n  )\n}\n\nexport const getNewChallengeGroup = async (contract: Contract) => {\n  await contract.events.NewChallengeGroup(\n    {\n      fromBlock: 0\n    },\n    function(_error: any, event: any) {\n      console.log('event,', event)\n    }\n  )\n}\n\n// contract.getPastEvents('allEvents', {fromBlock: 0}, function(error, events){ console.log(events); })\n\n// web3.eth.sendTransaction({\n//   from: '0xE13acF256C86292d0f808eA58B8afFE162927a3D',\n//   to: '0xCB4b9C9292410007D6FB7a7C061666B298f06ee2',\n//   value: 2000000000000000000\n// })\n\n// await MyContract.events.NewChallengeGroup(\n//   {\n//     fromBlock: 0,\n//     to: 'latest'\n//   },\n//   function(error: any, event: any) {\n//     console.log('event,', event)\n//   }\n// )\n\n// await MyContract.events.NewChallenge(\n//   {proposer: challenger},\n//   {\n//     fromBlock: 0,\n//     to: 'latest'\n//   },\n//   function(error: any, event: any) {\n//     console.log('event,', event)\n//   }\n// )\n\n// await MyContract.events.FinishChallenge(\n//   {who: challenger, status: 0},\n//   {\n//     fromBlock: 0,\n//     to: 'latest'\n//   },\n//   function(error: any, event: any) {\n//     console.log('event,', event)\n//   }\n// )\n"],"file":"contractService.js"}