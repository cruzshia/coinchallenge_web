{"version":3,"sources":["../../../src/epics/commonEpic/commonEpic.ts"],"names":["initContractEpic","action$","pipe","INIT_CONTRACT","errorAction","contract","userAddress","error","NO_PROVIDER","web3","Web3","providers","WebsocketProvider","eth","getAccounts","accounts","Contract","CoinChallengs","abi","gas","window","length"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD;AAAA,SAC9BA,OAAO,CAACC,IAAR,CACE,6BAAOC,qBAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA,0BAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAEFC,YAAAA,WAFE,GAEY,yBAAY;AAC9BC,cAAAA,QAAQ,EAAE,IADoB;AAE9BC,cAAAA,WAAW,EAAE,IAFiB;AAG9BC,cAAAA,KAAK,EAAEC;AAHuB,aAAZ,CAFZ;AAAA;;AAAA,kBASF,OAAOC,IAAP,KAAgB,WATd;AAAA;AAAA;AAAA;;AAUJA,YAAAA,IAAI,GAAG,IAAIC,YAAJ,CACL,IAAIA,aAAKC,SAAL,CAAeC,iBAAnB,CAAqC,qBAArC,CADK,CAAP;AAVI;AAAA,mBAcaH,IAAI,CAACI,GAAL,CAASC,WAAT,EAdb;;AAAA;AAcJC,YAAAA,QAdI;AAeEV,YAAAA,QAfF,GAea,IAAII,IAAI,CAACI,GAAL,CAASG,QAAb,CACfC,wBAAcC,GADC,EAEf,4CAFe,EAGf;AACEC,cAAAA,GAAG,EAAE;AADP,aAHe,CAfb;AAsBJC,YAAAA,MAAM,CAACf,QAAP,GAAkBA,QAAlB;AAtBI,6CAuBG,yBAAY;AACjBA,cAAAA,QAAQ,EAARA,QADiB;AAEjBC,cAAAA,WAAW,EAAES,QAAQ,CAACM,MAAT,GAAkBN,QAAQ,CAAC,CAAD,CAA1B,GAAgC,IAF5B;AAGjBA,cAAAA,QAAQ,EAARA,QAHiB;AAIjBR,cAAAA,KAAK,EAAE;AAJU,aAAZ,CAvBH;;AAAA;AAAA,6CA8BGH,WA9BH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiCCA,WAjCD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV,GAFF,CAD8B;AAAA,CAAzB;;;eAyCQ,CAACJ,gBAAD,C","sourcesContent":["import { Action } from '@Src/typing/globalTypes'\nimport { INIT_CONTRACT, setContract } from './action'\nimport { ofType, ActionsObservable } from 'redux-observable'\nimport { switchMap } from 'rxjs/operators'\nimport Web3 from 'web3'\nimport CoinChallengs from '@Src/contracts/CoinChallenges.json'\nimport { NO_PROVIDER } from '@Src/contants/errorCode'\n\nexport const initContractEpic = (action$: ActionsObservable<Action>) =>\n  action$.pipe(\n    ofType(INIT_CONTRACT),\n    switchMap(async () => {\n      let accounts: string[]\n      const errorAction = setContract({\n        contract: null,\n        userAddress: null,\n        error: NO_PROVIDER\n      })\n\n      try {\n        if (typeof web3 !== 'undefined') {\n          web3 = new Web3(\n            new Web3.providers.WebsocketProvider('ws://localhost:7545')\n          )\n\n          accounts = await web3.eth.getAccounts()\n          const contract = new web3.eth.Contract(\n            CoinChallengs.abi,\n            '0x21e4624c5a0b3fda81d0833d412dded2bb3a7a7c',\n            {\n              gas: 4600000\n            }\n          )\n          window.contract = contract\n          return setContract({\n            contract,\n            userAddress: accounts.length ? accounts[0] : null,\n            accounts,\n            error: null\n          })\n        } else {\n          return errorAction\n        }\n      } catch (e) {\n        return errorAction\n      }\n    })\n  )\n\nexport default [initContractEpic]\n"],"file":"commonEpic.js"}