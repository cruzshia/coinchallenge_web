{"version":3,"sources":["../../../src/epics/challengeEpic/challengeEpic.ts"],"names":["getChallengeEpic","action$","state$","pipe","GET_CAHLLENGE","action","commonReducer","value","get","contract","payload","groupId","challenger","methods","getChallenge","call","response","challenge","targetDays","Number","totalDays","completeDays","startDayTimestamp","sponserSize","sponserChallengeEpic","SPONSER_CHALLENGE"],"mappings":";;;;;;;AAAA;;AAUA;;AACA;;AACA;;AAEA;AAEO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,OAD8B,EAE9BC,MAF8B;AAAA,SAI9BD,OAAO,CAACE,IAAR,CACE,6BAAOC,qBAAP,CADF,EAEE,0BAAU,UAACC,MAAD,EAAoB;AAC5B,QAAMC,aAAa,GAAGJ,MAAM,CAACK,KAAP,CAAaC,GAAb,CAAiB,QAAjB,CAAtB;AAD4B,eAET,CAACF,aAAa,CAACE,GAAd,CAAkB,UAAlB,CAAD,CAFS;AAAA,QAErBC,QAFqB;AAAA,gBAGIJ,MAAM,CAACK,OAHX;AAAA,QAGpBC,OAHoB,SAGpBA,OAHoB;AAAA,QAGXC,UAHW,SAGXA,UAHW;AAI5B,WAAO,gBACLH,QAAQ,CAACI,OAAT,CAAiBC,YAAjB,CAA8BH,OAA9B,EAAuCC,UAAvC,EAAmDG,IAAnD,EADK,EAELZ,IAFK,CAGL,oBAAI,UAACa,QAAD,EAAmB;AACrB,UAAMC,SAAS,GAAG;AAChBC,QAAAA,UAAU,EAAEC,MAAM,CAACH,QAAQ,CAAC,CAAD,CAAT,CADF;AAEhBI,QAAAA,SAAS,EAAED,MAAM,CAACH,QAAQ,CAAC,CAAD,CAAT,CAFD;AAGhBK,QAAAA,YAAY,EAAEF,MAAM,CAACH,QAAQ,CAAC,CAAD,CAAT,CAHJ;AAIhBM,QAAAA,iBAAiB,EAAEH,MAAM,CAACH,QAAQ,CAAC,CAAD,CAAT,CAAN,GAAsB,IAJzB;AAKhBO,QAAAA,WAAW,EAAEJ,MAAM,CAACH,QAAQ,CAAC,CAAD,CAAT;AALH,OAAlB;AAOA,aAAO,0BAAaC,SAAb,CAAP;AACD,KATD,CAHK,CAAP;AAcD,GAlBD,CAFF,CAqBE;AACA;AACA;AAvBF,GAJ8B;AAAA,CAAzB;;;;AA8BA,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCvB,OADkC,EAElCC,MAFkC;AAAA,SAIlCD,OAAO,CAACE,IAAR,CACE,6BAAOsB,yBAAP,CADF,EAEE,oBAAI,YAAM;AACR,WAAO,8BAAiB,EAAjB,CAAP;AACD,GAFD,CAFF,CAJkC;AAAA,CAA7B,C,CAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eAEe,CAACzB,gBAAD,C","sourcesContent":["import {\n  GET_CAHLLENGE,\n  GET_CAHLLENGE_SPONSERS,\n  SPONSER_CHALLENGE,\n  setChallenge,\n  setChallengeSponsers,\n  setSponserResult\n} from './action'\nimport { Action, ChallengeType } from '@Src/typing/globalTypes'\n\nimport { ofType, ActionsObservable, StateObservable } from 'redux-observable'\nimport { map, switchMap, catchError } from 'rxjs/operators'\nimport { from, of } from 'rxjs'\n\n// import { Sponser } from '@Reducers/challengeReducer'\n\nexport const getChallengeEpic = (\n  action$: ActionsObservable<Action>,\n  state$: StateObservable<any>\n) =>\n  action$.pipe(\n    ofType(GET_CAHLLENGE),\n    switchMap((action: Action) => {\n      const commonReducer = state$.value.get('common')\n      const [contract] = [commonReducer.get('contract')]\n      const { groupId, challenger } = action.payload as any\n      return from(\n        contract.methods.getChallenge(groupId, challenger).call()\n      ).pipe(\n        map((response: any) => {\n          const challenge = {\n            targetDays: Number(response[0]),\n            totalDays: Number(response[1]),\n            completeDays: Number(response[2]),\n            startDayTimestamp: Number(response[3]) * 1000,\n            sponserSize: Number(response[5])\n          } as ChallengeType\n          return setChallenge(challenge)\n        })\n      )\n    })\n    // catchError((err: any) => {\n    //   return of({ type: 'test' })\n    // })\n  )\n\nexport const sponserChallengeEpic = (\n  action$: ActionsObservable<Action>,\n  state$: StateObservable<any>\n) =>\n  action$.pipe(\n    ofType(SPONSER_CHALLENGE),\n    map(() => {\n      return setSponserResult({})\n    })\n  )\n\n// export const getChallengeSponserEpic = async (\n// action$: ActionsObservable<Action>,\n// state$: StateObservable<any>\n// ) =>\n//   action$.pipe(\n//     ofType(GET_CAHLLENGE_SPONSERS),\n//     map(async (action: Action) => {\n//       const contract = state$.value.get('common').get('contract')\n//       const sponserSize = state$.value.get('challenge').get('sponserSize') || 0\n//       const { groupId, challenger } = action.payload as any\n\n//       let sponsers: Array<Sponser> = []\n//       for (let i = 0; i < sponserSize; i++) {\n//         const sponser = await contract.methods\n//           .getSponsor(groupId, challenger, i)\n//           .call()\n//         sponsers.push(sponser)\n//       }\n//       return setChallengeSponsers({ sponsers })\n//     })\n//   )\n\nexport default [getChallengeEpic]\n"],"file":"challengeEpic.js"}